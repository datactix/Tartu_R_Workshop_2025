---
title: "R Workshop: Synthetic Data Generation"
format: 
  pdf:
    toc: true
    toc-location: left
    toc_float: true
    code-overflow: scroll
    embed-resources: true
editor: visual
---

### R Workshop: generating synthetic datasets

List of R recipes to generate synthetic datasets to be used to illustrate the R code we want to share with the students as a cookbook.

Feel free to comment or add new recipes.

## Load required R libraries

```{r}
library(dplyr)
library(tidyverse)
library(MASS)
```

## Generate random samples

```{r}
# from a known list
sample(x = c("A", "B", "C"), size = 10, replace = TRUE, prob = c(0.6, 0.2, 0.2))
```

```{r}
set.seed(123)
# from known distributions
rnorm(n = 5, mean = 2, sd = 3)
runif(n = 3, min = 10, max = 20)
rbinom(n = 5, size = 10, prob = 0.5)
```

## Build a virtual cohort

```{r}
set.seed(42)
nb_patients <- 100

df_data <- tibble(
  subject_id = paste0("SUBJ", stringr::str_pad(1:nb_patients, width = 4, side = "left", pad = "0")),
  age = round(runif(n = nb_patients, 
              min = 20, max = 59),
              digits = 1),
  sex = sample(x = c('Female', 'Male'), 
               size = nb_patients, 
               replace = TRUE, 
               prob = c(0.6, 0.4)),
  status = sample(x = c('Healthy', 'Infected', 'Recovered'), 
               size = nb_patients, 
               replace = TRUE, 
               prob = c(0.2, 0.3, 0.5))
)
df_data
```

## Plot cohort distribution

```{r}

p <- ggplot(data=df_data, aes(x=status, y=age)) +
  geom_boxplot() +
  geom_jitter(width = 0.1) +
  ggtitle("my first plot")
p
```

## Create uncorrelated measurements

```{r}
set.seed(42)
nb_patients <- 100

df_data <- tibble(
  subject_id = paste0("SUBJ", stringr::str_pad(1:nb_patients, width = 4, side = "left", pad = "0")),
  bmi = round(rnorm(n = nb_patients, mean = 25, sd = 4), digits = 1),
  bp_systolic = floor(rnorm(n = nb_patients, mean = 85, sd = 10)),
  bp_diastolic = floor(rnorm(n = nb_patients, mean = 125, sd = 13)),
)
df_data
```

## Create a measurement distribution which parameters depend on a categorical variable

```{r}
set.seed(42)
nb_patients <- 100

df_data <- tibble(
  subject_id = paste0("SUBJ", stringr::str_pad(1:nb_patients, width = 4, side = "left", pad = "0")),
  treatment_group = sample(c("Control", "Treatment_A", "Treatment_B"), 
                           size = nb_patients, 
                           replace = TRUE, 
                           prob = c(0.3, 0.3, 0.4)),
  measurement_1 = rnorm(n = nb_patients, 
                        mean = case_when(
                                        treatment_group == "Control" ~ 30,
                                        treatment_group == "Treatment_A" ~ 70,
                                        treatment_group == "Treatment_B" ~ 55), 
                        sd = 10)
)

df_data


```

```{r}

p <- ggplot(data=df_data, aes(x=treatment_group, y=measurement_1)) +
  geom_boxplot() +
  ggtitle("my 2nd plot")
p
```

## Create correlated measurements

```{r}
set.seed(42)
nb_patients <- 100

means <- c(IL6 = 10, TNFa = 5, IL10 = 8)
cov_matrix <- matrix(c(1.0, 0.8, 0.5,
                       0.8, 1.0, 0.3,
                       0.5, 0.3, 1.0), nrow = 3)

df_biomarker <- as_tibble(MASS::mvrnorm(n = nb_patients, 
                                        mu = means, 
                                        Sigma = cov_matrix)) |>
  dplyr::mutate(subject_id = 1:nb_patients, .before=1)


df_biomarker
```

```{r}
GGally::ggpairs(data = df_biomarker, columns = 2:4, progress = FALSE)
```

## Generate high-dimensional datasets

```{r}
set.seed(42)
nb_patients <- 100
nb_proteins <- 500

# 500 proteins
proteins <- paste0("Protein", 1:nb_proteins)  
# Create some correlation between proteins
cov_matrix <- diag(nb_proteins) * 0.8 + matrix(0.2, 
                                               ncol = nb_proteins, 
                                               nrow = nb_proteins)  
protein_expression <- as_tibble(MASS::mvrnorm(n = nb_patients, 
                                              mu = rep(10, nb_proteins), 
                                              Sigma = cov_matrix)) |>
  purrr::set_names(proteins)

proteomics_data <- protein_expression |>
  dplyr::mutate(subject_id = 1:nb_patients, 
         group = sample(c("Healthy", "Disease"), 
                        size = nb_patients, replace = TRUE))
proteomics_data

```

## Generate random count data with parameters controlled by group

```{r}
set.seed(42)
n <- 100  # Define the number of subjects

immune_data <- crossing(subject_id = 1:n, condition = c("Control", "Stimulated")) %>%
  mutate(
    T_cells = rpois(n * 2, lambda = 100 + 50 * (condition == "Stimulated")) + 
              rnorm(n * 2, sd = 10),  # Random variation for each subject/condition
    B_cells = rpois(n * 2, lambda = 50 + 20 * (condition == "Stimulated")) + 
              rnorm(n * 2, sd = 5)   # Random variation for each subject/condition
  )
head(immune_data)

```
