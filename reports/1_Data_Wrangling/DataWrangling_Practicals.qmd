---
title: "R Workshop: Data Wrangling Practicals"
format:
  html:
    toc: true
    toc-location: left
    toc_float: true
    embed-resources: true
editor: visual
---

# Data Wrangling on the MI Datasets

In this practical, you will have the opportunity to put into practice the different R recipes covered in the Data Wrangling Cookbook on datasets that have been generated by the Milieu Intérieur project ([www.milieuinterieur.fr/en](http://www.milieuinterieur.fr/en)).

Through a series of guided exercises, you will explore 4 different datasets: eCRF, TruCulture Luminex, TruCulture Nanostring, and an optional Flow Cytometry.

These datasets will need to be loaded from different file formats (xlsx, csv, tsv), and reshaped, so that they can become tidy datasets ready for further downstream analysis.

## Set-Up

```{r}
# load R libraries
library(tidyverse)
library(here)
```

## Part #1: load the eCRF Dataset

Using the path to the eCRF dataset, follow the questions listed below to generate a tidy version of the eCRF table, using dplyr/tidyr functions.

```{r}
# path to eCRF dataset as XLSX file
ecrf_filename = here::here("data/untidy_mi_datasets/eCRF/MI_eCRF.xlsx")
```

#### **Instructions to load and curate the dataset:**

-   Identify the format of the file, and choose the appropriate function to read it.

-   Extract each individual table from each sheet, by observing how the data was captured.

    ```{r}
    # Extract sheet #1
    # 
    #... your code here ...
    ```

    ```{r}
    # Extract sheet #2
    # 
    #... your code here ...
    ```

    ```{r}
    # Extract sheet #3
    # 
    #... your code here ...
    ```

    ```{r}
    # Extract sheet #4
    # 
    #... your code here ...
    ```

-   Merge all individual tables into a wide table, where each row represents a donor, and each column represents a unique eCRF variable.

    ```{r}
    # Merge all eCRF sub-tables into a single one
    # 
    #... your code here ...
    ```

-   Save curated dataset as a TSV file

    ```{r}
    # Save curated table as TSV file
    # 
    #... your code here ...
    ```

#### **Describe the dataset**

-   How many donors are described in this eCRF dataset ? How many men and women ?

    ```{r}
    # ... your code here ...
    ```

-   How many variables are listed ?

    ```{r}
    # ... your code here ...
    ```

-   Is there any missing data ?

    ```{r}
    # ... your code here ...
    ```

#### **Exploratory analysis**

-   What is the median BMI measurement between Smokers and Non-Smokers. Break it down for both men and women ?

    ```{r}
    # ... your code here ...
    ```

-   List the Donor Identifiers from women whom have been vaccinated for Hepatitis B, but not for Hepatitis A ?

    ```{r}
    # ... your code here ...
    ```

-   By only looking at the median value for HoursOfSleep, what are the values for the youngest 20%, versus the oldest 20% of the cohort ?

    ```{r}
    # ... your code here ...
    ```

## Part #2: load the TruCulture Luminex dataset

Using the path to the TruCulture Luminex dataset, follow the questions listed below to generate a tidy version of the Luminex measurements table, using dplyr/tidyr functions.

```{r}
# path to TruCulture luminex dataset
truc_luminex_filename = here::here("data/untidy_mi_datasets/luminex/MI_TruC_Luminex.csv")
```

#### **Instructions to load and curate the dataset**

-   take into account that it is a CSV (comma separated variable) format to select the function to read it.

    ```{r}
    # ... your code here ...
    ```

-   Make sure that the Subject Identifier matches the format of the Identifiers found in the previous eCRF dataset so that it will allow for a merge.

    ```{r}
    # ... your code here ...
    ```

-   Transform the long format of the dataset into a wide format so that each cytokine is represented by a unique column.

    ```{r}
    # ... your code here ...
    ```

-   Merge dataset with eCRF table, and save curated dataset as a TSV file

    ```{r}
    # Merge the TruC Luminex dataset with the eCRF dataset and save as TSV file
    #
    # ... your code here ...
    ```

#### **Describe the dataset:**

-   What are the lists of cytokines and TruCulture stimulations described in this dataset ?

    ```{r}
    # ... your code here ...
    ```

-   How many unique subjects are described ? How many measurements per subject are described ?

    ```{r}
    # ... your code here ...
    ```

-   Is there any missing data ?

    ```{r}
    # ... your code here ...
    ```

#### **Exploratory analysis**

-   For each TruCulture stimulation, sort the cytokines according to their mean expression across the cohort.

    ```{r}
    # ... your code here ...
    ```

-   If one only considers the SEB TruCulture stimulation, rank the cytokine expressions by decreasing standard deviation measurement.

    ```{r}
    # ... your code here ...
    ```

## Part #3: load the Nanostring dataset

The full Nanostring dataset can be found in a directory containing one file per TruCulture stimulation.

```{r}
nanostring_directory <- here::here("data/untidy_mi_datasets/nanostring/")
# list all nanostring files
# list.files(path = nanostring_directory, pattern = ".tsv", full.names = TRUE)
```

#### **Instruction to load and curate the dataset:**

-   Notice that the file format is TSV (tab separated variables) and choose the appropriate function to load a single file.

    ```{r}
    # ... your code here ...
    ```

-   Start by loading a single file, and take notice of the identifier format

    ```{r}
    # ... your code here ...
    ```

-   Identify a method to load all the files at once that will generate a unique data.frame by aggregating all datasets together. Apply the necessary transformation on the Donor Identifier to match the eCRF Donor Identifier, and relocate the 'stimulus' column after the identifier column.

    ```{r}
    # ... your code here ...
    ```

-   Merge curated Nanostring data.frame with eCRF data.frame, and save as a TSV file

    ```{r}
    # ... your code here ...
    ```

#### **Describe the dataset:**

-   Identify the number of unique donors per TruC Stimulations

    ```{r}
    # ... your code here ...
    ```

-   How many genes are described in the dataset ?

    ```{r}
    # ... your code here ...
    ```

-   Is there any missing data ?

    ```{r}
    # ... your code here ...
    ```

#### **Exploratory analysis:**

-   For each stimulation, identify the top 10 genes with the highest median expression.

    ```{r}
    # ... your code here ...
    ```

-   In the case of the BCG TruCulture stimulation, list the genes with a CV \< 0.05 (Coefficient of Variation, i.e. standard deviation divided by mean)

    ```{r}
    # ... your code here ...
    ```

-   For each stimulation, identify the top 10 genes with the highest CV for men and women.

    ```{r}
    # ... your code here ...
    ```

## Part #4 (Optional): load the Cytometry dataset

Using the path to the Cytometry, follow the questions below to generate a tidy version of the dataset using dplyr/tidyr functions.

```{r}
cytometry_filename = here::here("data/untidy_mi_datasets/cytometry/MI_Cytometry.tsv")
```

#### **Instructions to load and curate dataset:**

-   Notice the TSV format of the file, and choose the appropriate function to load the file

    ```{r}
    # ... your code here ...
    ```

-   Load file and update the subject identifier to match the identifier from the eCRF dataset.

    ```{r}
    # ... your code here ...
    ```

-   Transform the dataset so that each cell population becomes a unique column.

    ```{r}
    # ... your code here ...
    ```

-   Merge with eCRF dataset, and save curated dataset as a TSV file

    ```{r}
    # ... your code here ...
    ```

#### **Describe the dataset:**

-   How many cell populations are captured ?

    ```{r}
    # ... your code here ...
    ```

-   How many unique donors are represented in this dataset ? How many of them have a full record across all variables ?

    ```{r}
    # ... your code here ...
    ```

-   List the cell populations that have been measured multiple times across panels.

    ```{r}
    # ... your code here ...
    ```

#### **Exploratory analysis**

-   Identify the cell populations with the highest level of missing data

    ```{r}
    # ... your code here ...
    ```

-   Sort the cell populations by decreasing CV values across the entire cohort

    ```{r}
    # ... your code here ...
    ```

-   Identify the cell populations that have the lowest count in case of a CMV positive serology, compared to negative serology.

    ```{r}
    # ... your code here ...
    ```
